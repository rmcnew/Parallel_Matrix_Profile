Tasks that need to get done for Matrix Profile:

Read in time series CSV
  - Get CSV parser library
  - Add to CMake build
  - Add unit test to make sure it works
  - put time series data in double array
  - MPI_Bcast time_series double array to all processes
  - MPI_Bcast window_size to all processes

Each process works on a portion of the time series double array:
  - Divide time series double array into process_count sections  
  - Each process calculates distance profiles and indicies and for its section and sends the calculated distance profile and indices to LEADER (rank 0) process.   This is a single MPI_Isend at the end of the calculation.  After a non-LEADER process has completed the distance profile calculation and sent the data for its section, it exits.
  - After the LEADER process has received a distance profile from each non-LEADER process, it does an element-wise minimum to update the overall matrix profile. After the data has been received from each process, the LEADER process writes the matrix profile to the output file and exits.

These are the steps to implement the STAMP (Scalable Time series Anytime Matrix Profile) algorithm described in:  https://www.cs.ucr.edu/~eamonn/PID4481997_extend_Matrix%20Profile_I.pdf   Note that we are doing the "self-similarity join" meaning that we are comparing the input time series against itself.

In order to implement STAMP, we need to calculate sliding_dot_product:

// Needed for sliding_dot_product
complex<double>* elementwise_multiply(complex<double>* transformed_query_segment, complex<double>* transformed_time_series) {
    uint64_t result_length = 2*time_series_length;
    complex<double>* result = (complex<double>*) calloc(result_length, sizeof(complex<double>));
    for (uint64_t j = 0; j < result_length; j++) {
    	result = transformed_query_segment[j] * transformed_time_series[j];
    }
    return result;
}

// This is from TABLE 1 in the Matrix Profile 1 paper
// Input:  A query_segment (part of the time_series that is window_size in length), and the whole time_series
// Output:  The dot product between the query_segment and all subsequences of the time_series
double* sliding_dot_product(double* query_segment, double* time_series) {

    // Step 1
    // uint64_t time_series_length = length(time_series)  // called 'n' in the paper
    // uint64_t query_segment_length = length(query_segment)  // called 'm' in the paper
    // uint64_t matrix_profile_length = time_series_length - query_segment_length + 1;

    // Step 2
    // double* appended_time_series = copy time_series and append n zeros

    // Step 3
    // double* reversed_query_segment = reverse(query_segment)

    // Step 4
    // double* appended_query_segment = copy reversed_query_segment and append (2*time_series_length - query_segment_length) zeros

    // Step 5
    // complex* transformed_query_segment = fast_fourier_transform(appended_query_segment)
    // complex* transformed_time_series = fast_fourier_transform(appended_time_series)

    // Step 6
    // complex transformed_dot_product = elementwise_multiply(transformed_query_segment, transformed_time_series)
    // double* dot_product = inverse_fast_fourier_transform(transformed_dot_product)

    // Step 7
    // return dot_product
}

The fast_fourier_transform and inverse_fast_fourier_transform will need to come from an external library (FFTW3?).


We also need to compute the mean and standard deviation for the query_segment and time_series.  The paper “Searching and Mining Trillions of Time Series Subsequences under Dynamic Time Warping” shows a fast way to do this.  This is referenced in TABLE 2 in the Matrix Profile 1 paper (reference number 22).

void compute_mean_and_standard_deviation(double* query_segment, double* time_series, double* query_segment_mean, double* query_segment_standard_deviation, double* time_series_window_mean, double* time_series_window_standard_deviation) {

    // the paper recommends cacheing partial sums to speed up the mean and standard deviation calculations
    // We can just implement normal mean and standard deviation calculations.
    // First we need to make it work correctly, then we can see about making it faster.
}


double* calculate_distance_profile(double* query_segment, double* time_series, double* dot_product, double query_segment_mean, double query_segment_standard_deviation, double time_series_window_mean, double time_series_window_standard_deviation) {

    // double* distance_profile = (double*) calloc(matrix_profile_length, sizeof(double));
    // for(uing64_t i = 0; i < matrix_profile_length; i++) {
    //     distance_profile[i] = std::sqrt(2*m * (1 - ((dot_product[i] - m * query_segment_mean * time_series_window_mean) / (m * query_segment_standard_deviation * time_series_window_standard_deviation)))); 
    // }
    // return distance_profile;
}


// MASS from TABLE 2
// Input:  A query_segment (part of the time_series that is window_size in length), and the whole time_series
// Output:  A distance_profile for the query_segment
double* mueen_similarity_search(double* query_segment, double* time_series) {

    // Step 1
    // Compute SlidingDotProduct
    // double* dot_product = sliding_dot_product(query_segment, time_series);

    // Step 2
    // Compute Means and Standard Deviations
    // double query_segment_mean;
    // double query_segment_standard_deviation;
    // double time_series_window_mean;
    // double time_series_window_standard_deviation;
    // compute_mean_and_standard_deviation(query_segment, time_series, &query_segment_mean, &query_segment_standard_deviation, &time_series_window_mean, &time_series_window_standard_deviation);

    // Step 3
    // Compute Distance Profile
    // double* distance_profile = calculate_distance_profile(double* query_segment, double* time_series, double* dot_product, double query_segment_mean, double query_segment_standard_deviation, double time_series_window_mean, double time_series_window_standard_deviation);

    // Step 4
    // return distance_profile;
}


// Element-wise minimum needed for STAMP
void elementwise_minimum(double* matrix_profile, uint64_t* matrix_profile_index, *double distance_profile, uint64_t index) {
     for (uint64_t i = 0; i < matrix_profile_length; i++) {
     	 if (i != index) {
	    if (matrix_profile[i] > distance_profile[i]) {
	       matrix_profile[i] = distance_profile[i];
	       // matrix_profile_index needs to be updated here too
	    }
	 }
     }
}


// STAMP from TABLE 3
// Input:  time_series and window_size
// Output:  matrix_profile and matrix_profile_index
void stamp(double* time_series, int window_size, double* matrix_profile, double* matrix_profile_index) {

    // Step 1
    // This was calculated above
    // uint64_t time_series_length = length(time_series)  // called 'n' in the paper

    // Step 2
    // Initialize local matrix profile and matrix profile index
    // double* matrix_profile = (double*) calloc(matrix_profile_length, sizeof(double));
    // uint64_t* matrix_profile_index = (uint64_t*) calloc(matrix_profile_length, sizeof(uint64_t));
    // for (uint64_t i = 0; i < matrix_profile_length; i++) {
    //     matrix_profile[i] = DBL_MAX;
    //     matrix_profile_index[i] = 0;
    // }

    // Step 3:  Each process handles its time series segment indices
    // uint64_t factor = matrix_profile_length / process_count;
    // uint64_t start_index = rank * factor;
    // uint64_t stop_index = (rank == process_count - 1) ? (matrix_profile_length - 1) : (start_index + factor);
    // for (uint64_t index = start_index; index < stop_index; index++) {
    //     double* query_segment = time_series[index];
    //     double* distance_profile = double* mueen_similarity_search(query_segment, time_series);
    //	   elementwise_minimum(matrix_profile, matrix_profile_index, distance_profile, index);
    // }
}
