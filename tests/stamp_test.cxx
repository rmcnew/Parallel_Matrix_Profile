#include <gtest/gtest.h>
#include "stamp.h"

// rank and process count must be defined external to the
// stamp functions to simulate the MPI variable
int rank = 0;
int process_count = 1;

TEST(StampTest, test_stamp) {
    
    /* Test for stamp:

    void printMatrixProfile(const std::string& name, const MatrixProfile& matrix_profile);

    MatrixProfile stamp(const LongDoubleArray& time_series, const int& window_size, const unsigned long& exclusion_radius);

    */

    LongDoubleArray ts;
    ts.length = 92;
    ts.data = (long double*) calloc(ts.length, sizeof(long double));
    ts.data[0] = 12;
    ts.data[1] = 118;
    ts.data[2] = 132;
    ts.data[3] = 129;
    ts.data[4] = 121;
    ts.data[5] = 135;
    ts.data[6] = 148;
    ts.data[7] = 148;
    ts.data[8] = 136;
    ts.data[9] = 119;
    ts.data[10] = 104;
    ts.data[11] = 118;
    ts.data[12] = 115;
    ts.data[13] = 126;
    ts.data[14] = 141;
    ts.data[15] = 135;
    ts.data[16] = 125;
    ts.data[17] = 149;
    ts.data[18] = 170;
    ts.data[19] = 170;
    ts.data[20] = 158;
    ts.data[21] = 133;
    ts.data[22] = 114;
    ts.data[23] = 140;
    ts.data[24] = 145;
    ts.data[25] = 150;
    ts.data[26] = 178;
    ts.data[27] = 163;
    ts.data[28] = 172;
    ts.data[29] = 178;
    ts.data[30] = 199;
    ts.data[31] = 199;
    ts.data[32] = 184;
    ts.data[33] = 162;
    ts.data[34] = 146;
    ts.data[35] = 166;
    ts.data[36] = 171;
    ts.data[37] = 180;
    ts.data[38] = 193;
    ts.data[39] = 181;
    ts.data[40] = 183;
    ts.data[41] = 218;
    ts.data[42] = 230;
    ts.data[43] = 242;
    ts.data[44] = 209;
    ts.data[45] = 191;
    ts.data[46] = 172;
    ts.data[47] = 194;
    ts.data[48] = 196;
    ts.data[49] = 196;
    ts.data[50] = 236;
    ts.data[51] = 235;
    ts.data[52] = 229;
    ts.data[53] = 243;
    ts.data[54] = 264;
    ts.data[55] = 272;
    ts.data[56] = 237;
    ts.data[57] = 211;
    ts.data[58] = 180;
    ts.data[59] = 201;
    ts.data[60] = 204;
    ts.data[61] = 188;
    ts.data[62] = 235;
    ts.data[63] = 227;
    ts.data[64] = 234;
    ts.data[65] = 264;
    ts.data[66] = 302;
    ts.data[67] = 293;
    ts.data[68] = 259;
    ts.data[69] = 229;
    ts.data[70] = 203;
    ts.data[71] = 229;
    ts.data[72] = 242;
    ts.data[73] = 233;
    ts.data[74] = 267;
    ts.data[75] = 269;
    ts.data[76] = 270;
    ts.data[77] = 315;
    ts.data[78] = 364;
    ts.data[79] = 347;
    ts.data[80] = 312;
    ts.data[81] = 274;
    ts.data[82] = 237;
    ts.data[83] = 278;
    ts.data[84] = 284;
    ts.data[85] = 277;
    ts.data[86] = 317;
    ts.data[87] = 313;
    ts.data[88] = 318;
    ts.data[89] = 374;
    ts.data[90] = 413;
    ts.data[91] = 405;

	MatrixProfile expected;
	expected.length = 83;	
	expected.data = (long double*) calloc(expected.length, sizeof(long double));
	expected.data[0] = 2.3302547777034177L;
	expected.data[1] = 0.8183124686033922L;
	expected.data[2] = 0.7378075631723987L;
	expected.data[3] = 0.7074759836873623L;
	expected.data[4] = 0.8855166053784083L;
	expected.data[5] = 0.8670145349785627L;
	expected.data[6] = 0.7930125433710051L;
	expected.data[7] = 1.063508794746865L;
	expected.data[8] = 1.1043411977337285L;
	expected.data[9] = 0.8169111628514665L;
	expected.data[10] = 0.6786490489588681L;
	expected.data[11] = 0.8786916489338669L;
	expected.data[12] = 0.9515847749097763L;
	expected.data[13] = 0.8241524511649997L;
	expected.data[14] = 0.9631792701548485L;
	expected.data[15] = 0.8604034722369528L;
	expected.data[16] = 1.0771139253107898L;
	expected.data[17] = 0.7150848442283582L;
	expected.data[18] = 0.8211647222256067L;
	expected.data[19] = 1.0060282281355237L;
	expected.data[20] = 0.9421113863958565L;
	expected.data[21] = 0.726764144804287L;
	expected.data[22] = 0.6882001796917159L;
	expected.data[23] = 0.8276915902280734L;
	expected.data[24] = 0.9241844409593405L;
	expected.data[25] = 0.8864152298827196L;
	expected.data[26] = 0.9304381380159433L;
	expected.data[27] = 0.6555727697153041L;
	expected.data[28] = 0.9201400332846313L;
	expected.data[29] = 0.7150848442283582L;
	expected.data[30] = 0.7930125433710051L;
	expected.data[31] = 1.0060282281355237L;
	expected.data[32] = 0.8844165624273322L;
	expected.data[33] = 0.6933911940503907L;
	expected.data[34] = 0.6734211143506279L;
	expected.data[35] = 0.8786916489338669L;
	expected.data[36] = 0.9515847749097763L;
	expected.data[37] = 0.9771407386012378L;
	expected.data[38] = 0.876396892054303L;
	expected.data[39] = 0.8602933043102555L;
	expected.data[40] = 0.8570896806983546L;
	expected.data[41] = 0.9511528631876855L;
	expected.data[42] = 1.0700991511626783L;
	expected.data[43] = 0.8543145861129054L;
	expected.data[44] = 0.9421113863958565L;
	expected.data[45] = 0.726764144804287L;
	expected.data[46] = 0.6882001796917159L;
	expected.data[47] = 0.8276915902280734L;
	expected.data[48] = 0.9303386353673364L;
	expected.data[49] = 0.8183124686033922L;
	expected.data[50] = 0.7378075631723987L;
	expected.data[51] = 0.7074759836873623L;
	expected.data[52] = 1.1932372886062026L;
	expected.data[53] = 0.9326178899409782L;
	expected.data[54] = 0.9429550548933133L;
	expected.data[55] = 0.9976159306917647L;
	expected.data[56] = 0.9440562995484425L;
	expected.data[57] = 0.6014612280348931L;
	expected.data[58] = 0.42161482558296315L;
	expected.data[59] = 0.4601125735064131L;
	expected.data[60] = 0.46046964370440424L;
	expected.data[61] = 0.46285269782253646L;
	expected.data[62] = 0.43493991254521847L;
	expected.data[63] = 0.336831595591884L;
	expected.data[64] = 0.3420675286886336L;
	expected.data[65] = 0.27346394589175826L;
	expected.data[66] = 0.3478389011780247L;
	expected.data[67] = 0.3878554014500162L;
	expected.data[68] = 0.33146231327970355L;
	expected.data[69] = 0.2982910651335166L;
	expected.data[70] = 0.27020464161951385L;
	expected.data[71] = 0.4601125735064131L;
	expected.data[72] = 0.46046964370440424L;
	expected.data[73] = 0.46285269782253646L;
	expected.data[74] = 0.43493991254521847L;
	expected.data[75] = 0.336831595591884L;
	expected.data[76] = 0.3420675286886336L;
	expected.data[77] = 0.27346394589175826L;
	expected.data[78] = 0.3478389011780247L;
	expected.data[79] = 0.3878554014500162L;
	expected.data[80] = 0.33146231327970355L;
	expected.data[81] = 0.2982910651335166L;
	expected.data[82] = 0.27020464161951385L;

	expected.index = (unsigned long*) calloc(expected.length, sizeof(unsigned long));
	expected.index[0] = 24;
	expected.index[1] = 49;
	expected.index[2] = 50;
	expected.index[3] = 51;
	expected.index[4] = 76;
	expected.index[5] = 29;
	expected.index[6] = 30;
	expected.index[7] = 31;
	expected.index[8] = 32;
	expected.index[9] = 33;
	expected.index[10] = 34;
	expected.index[11] = 35;
	expected.index[12] = 36;
	expected.index[13] = 1;
	expected.index[14] = 74;
	expected.index[15] = 75;
	expected.index[16] = 28;
	expected.index[17] = 29;
	expected.index[18] = 30;
	expected.index[19] = 31;
	expected.index[20] = 44;
	expected.index[21] = 45;
	expected.index[22] = 46;
	expected.index[23] = 47;
	expected.index[24] = 60;
	expected.index[25] = 61;
	expected.index[26] = 62;
	expected.index[27] = 63;
	expected.index[28] = 4;
	expected.index[29] = 17;
	expected.index[30] = 6;
	expected.index[31] = 19;
	expected.index[32] = 80;
	expected.index[33] = 81;
	expected.index[34] = 82;
	expected.index[35] = 11;
	expected.index[36] = 12;
	expected.index[37] = 13;
	expected.index[38] = 62;
	expected.index[39] = 75;
	expected.index[40] = 76;
	expected.index[41] = 5;
	expected.index[42] = 18;
	expected.index[43] = 67;
	expected.index[44] = 20;
	expected.index[45] = 21;
	expected.index[46] = 22;
	expected.index[47] = 23;
	expected.index[48] = 24;
	expected.index[49] = 1;
	expected.index[50] = 2;
	expected.index[51] = 3;
	expected.index[52] = 64;
	expected.index[53] = 65;
	expected.index[54] = 78;
	expected.index[55] = 79;
	expected.index[56] = 80;
	expected.index[57] = 69;
	expected.index[58] = 70;
	expected.index[59] = 71;
	expected.index[60] = 72;
	expected.index[61] = 73;
	expected.index[62] = 74;
	expected.index[63] = 75;
	expected.index[64] = 76;
	expected.index[65] = 77;
	expected.index[66] = 78;
	expected.index[67] = 79;
	expected.index[68] = 80;
	expected.index[69] = 81;
	expected.index[70] = 82;
	expected.index[71] = 59;
	expected.index[72] = 60;
	expected.index[73] = 61;
	expected.index[74] = 62;
	expected.index[75] = 63;
	expected.index[76] = 64;
	expected.index[77] = 65;
	expected.index[78] = 66;
	expected.index[79] = 67;
	expected.index[80] = 68;
	expected.index[81] = 69;
	expected.index[82] = 70;

    // top-level unit tests for stamp
    MatrixProfile result = stamp(ts, 10, 3);

    //printMatrixProfile("expected", expected);
    //printMatrixProfile("result", result);

	EXPECT_EQ(expected.length, result.length);
	for (unsigned long i = 0; i < expected.length; i++) {
		EXPECT_NEAR((double)expected.data[i], (double)result.data[i], 0.0000000000033);
		EXPECT_EQ(expected.index[i], result.index[i]);
	}

    // clean up
    free(ts.data);
    free(expected.data);
    free(expected.index);
    free(result.data);
    free(result.index);


    LongDoubleArray ts2;
    ts2.length = 126;
    ts2.data = (long double*) calloc(ts2.length, sizeof(long double));
    ts2.data[0] = 811.659973L;
    ts2.data[1] = 816.119995L;
    ts2.data[2] = 796.219971L;
    ts2.data[3] = 798.150024L;
    ts2.data[4] = 787.380005L;
    ts2.data[5] = 781.299988L;
    ts2.data[6] = 714.5L;
    ts2.data[7] = 698.840027L;
    ts2.data[8] = 742.02002L;
    ts2.data[9] = 682.219971L;
    ts2.data[10] = 675.5L;
    ts2.data[11] = 718.429993L;
    ts2.data[12] = 686.440002L;
    ts2.data[13] = 653.200012L;
    ts2.data[14] = 621.440002L;
    ts2.data[15] = 597.950012L;
    ts2.data[16] = 563.0L;
    ts2.data[17] = 673.580017L;
    ts2.data[18] = 668.059998L;
    ts2.data[19] = 699.599976L;
    ts2.data[20] = 693.72998L;
    ts2.data[21] = 707.940002L;
    ts2.data[22] = 676.880005L;
    ts2.data[23] = 701.809998L;
    ts2.data[24] = 653.159973L;
    ts2.data[25] = 654.869995L;
    ts2.data[26] = 670.0L;
    ts2.data[27] = 662.159973L;
    ts2.data[28] = 630.27002L;
    ts2.data[29] = 640.390015L;
    ts2.data[30] = 618.710022L;
    ts2.data[31] = 611.289978L;
    ts2.data[32] = 635.619995L;
    ts2.data[33] = 667.929993L;
    ts2.data[34] = 661.75L;
    ts2.data[35] = 691.049988L;
    ts2.data[36] = 691.619995L;
    ts2.data[37] = 670.969971L;
    ts2.data[38] = 683.799988L;
    ts2.data[39] = 677.02002L;
    ts2.data[40] = 701.97998L;
    ts2.data[41] = 762.320007L;
    ts2.data[42] = 732.22998L;
    ts2.data[43] = 738.849976L;
    ts2.data[44] = 739.780029L;
    ts2.data[45] = 714.630005L;
    ts2.data[46] = 718.98999L;
    ts2.data[47] = 744.119995L;
    ts2.data[48] = 719.690002L;
    ts2.data[49] = 729.400024L;
    ts2.data[50] = 738.200012L;
    ts2.data[51] = 704.73999L;
    ts2.data[52] = 694.400024L;
    ts2.data[53] = 677.0L;
    ts2.data[54] = 709.440002L;
    ts2.data[55] = 684.900024L;
    ts2.data[56] = 673.599976L;
    ts2.data[57] = 670.940002L;
    ts2.data[58] = 663.539978L;
    ts2.data[59] = 672.369995L;
    ts2.data[60] = 629.039978L;
    ts2.data[61] = 617.200012L;
    ts2.data[62] = 589.890015L;
    ts2.data[63] = 571.690002L;
    ts2.data[64] = 589.73999L;
    ts2.data[65] = 576.830017L;
    ts2.data[66] = 577.869995L;
    ts2.data[67] = 563.460022L;
    ts2.data[68] = 586.780029L;
    ts2.data[69] = 580.880005L;
    ts2.data[70] = 606.440002L;
    ts2.data[71] = 604.690002L;
    ts2.data[72] = 619.130005L;
    ts2.data[73] = 630.849976L;
    ts2.data[74] = 625.219971L;
    ts2.data[75] = 623.900024L;
    ts2.data[76] = 605.119995L;
    ts2.data[77] = 572.840027L;
    ts2.data[78] = 599.049988L;
    ts2.data[79] = 605.130005L;
    ts2.data[80] = 603.590027L;
    ts2.data[81] = 598.780029L;
    ts2.data[82] = 610.119995L;
    ts2.data[83] = 609.890015L;
    ts2.data[84] = 617.690002L;
    ts2.data[85] = 599.359985L;
    ts2.data[86] = 604.869995L;
    ts2.data[87] = 616.599976L;
    ts2.data[88] = 623.309998L;
    ts2.data[89] = 620.830017L;
    ts2.data[90] = 623.710022L;
    ts2.data[91] = 656.570007L;
    ts2.data[92] = 679.820007L;
    ts2.data[93] = 671.869995L;
    ts2.data[94] = 688.719971L;
    ts2.data[95] = 680.76001L;
    ts2.data[96] = 679.700012L;
    ts2.data[97] = 677.919983L;
    ts2.data[98] = 678.900024L;
    ts2.data[99] = 659.580017L;
    ts2.data[100] = 644.650024L;
    ts2.data[101] = 652.809998L;
    ts2.data[102] = 656.950012L;
    ts2.data[103] = 685.700012L;
    ts2.data[104] = 668.539978L;
    ts2.data[105] = 653.380005L;
    ts2.data[106] = 650.599976L;
    ts2.data[107] = 644.219971L;
    ts2.data[108] = 646.219971L;
    ts2.data[109] = 660.5L;
    ts2.data[110] = 655.289978L;
    ts2.data[111] = 649.26001L;
    ts2.data[112] = 643.380005L;
    ts2.data[113] = 657.619995L;
    ts2.data[114] = 644.780029L;
    ts2.data[115] = 646.97998L;
    ts2.data[116] = 677.349976L;
    ts2.data[117] = 687.200012L;
    ts2.data[118] = 709.669983L;
    ts2.data[119] = 709.73999L;
    ts2.data[120] = 710.919983L;
    ts2.data[121] = 714.630005L;
    ts2.data[122] = 699.099976L;
    ts2.data[123] = 713.76001L;
    ts2.data[124] = 709.98999L;
    ts2.data[125] = 707.820007L;

	MatrixProfile expected2;
	expected2.length = 117;

	expected2.data = (long double*) calloc(expected2.length, sizeof(long double));
	expected2.data[0] = 1.1360125176628684L;
	expected2.data[1] = 1.1701186026279882L;
	expected2.data[2] = 1.5123185430974L;
	expected2.data[3] = 1.5045622502132385L;
	expected2.data[4] = 1.7100341021091023L;
	expected2.data[5] = 1.7313882592663694L;
	expected2.data[6] = 1.3594041302907431L;
	expected2.data[7] = 1.065689683750856L;
	expected2.data[8] = 1.296699816035886L;
	expected2.data[9] = 1.6145613948811148L;
	expected2.data[10] = 1.562548261610325L;
	expected2.data[11] = 1.7985704416617623L;
	expected2.data[12] = 1.726062672184128L;
	expected2.data[13] = 1.7171707271900318L;
	expected2.data[14] = 1.2643585349068591L;
	expected2.data[15] = 1.5415730083152681L;
	expected2.data[16] = 1.5774158850738236L;
	expected2.data[17] = 2.1097327086283717L;
	expected2.data[18] = 1.7958696378562797L;
	expected2.data[19] = 1.3527654483160256L;
	expected2.data[20] = 1.559265696055762L;
	expected2.data[21] = 1.444964829465724L;
	expected2.data[22] = 1.065689683750856L;
	expected2.data[23] = 1.296699816035886L;
	expected2.data[24] = 1.6145613948811148L;
	expected2.data[25] = 1.562548261610325L;
	expected2.data[26] = 1.7985704416617623L;
	expected2.data[27] = 1.4559485853241578L;
	expected2.data[28] = 1.3657439327082157L;
	expected2.data[29] = 1.3148750357828147L;
	expected2.data[30] = 0.9946276812713261L;
	expected2.data[31] = 1.186478989399089L;
	expected2.data[32] = 1.8272593770312797L;
	expected2.data[33] = 1.495791840312798L;
	expected2.data[34] = 1.3947904185667621L;
	expected2.data[35] = 1.4403368211324394L;
	expected2.data[36] = 1.4655257180589238L;
	expected2.data[37] = 1.4379667913226035L;
	expected2.data[38] = 1.6303828832495468L;
	expected2.data[39] = 1.7978616971405932L;
	expected2.data[40] = 2.635361405792943L;
	expected2.data[41] = 2.279787232681607L;
	expected2.data[42] = 2.704781764774373L;
	expected2.data[43] = 2.161281682780786L;
	expected2.data[44] = 1.7313882592663694L;
	expected2.data[45] = 1.9165803526396485L;
	expected2.data[46] = 1.5036097848281025L;
	expected2.data[47] = 1.1701186026279882L;
	expected2.data[48] = 1.5342326288756039L;
	expected2.data[49] = 1.5045622502132385L;
	expected2.data[50] = 1.7708551934044348L;
	expected2.data[51] = 1.7164424906265188L;
	expected2.data[52] = 1.3594041302907431L;
	expected2.data[53] = 1.0795987306434136L;
	expected2.data[54] = 1.3185034625495349L;
	expected2.data[55] = 1.3584316136673014L;
	expected2.data[56] = 1.1360125176628684L;
	expected2.data[57] = 1.2316176699325976L;
	expected2.data[58] = 1.5123185430974L;
	expected2.data[59] = 1.7406039064485497L;
	expected2.data[60] = 1.7982135702146884L;
	expected2.data[61] = 2.3665097685721577L;
	expected2.data[62] = 1.9548051882287487L;
	expected2.data[63] = 1.8001669278055716L;
	expected2.data[64] = 1.4330357338611985L;
	expected2.data[65] = 1.2619326201935341L;
	expected2.data[66] = 1.1902783704560425L;
	expected2.data[67] = 1.428902293163826L;
	expected2.data[68] = 2.240788153357123L;
	expected2.data[69] = 2.376404106635555L;
	expected2.data[70] = 2.180504136385553L;
	expected2.data[71] = 2.256929824961009L;
	expected2.data[72] = 2.0317857518331737L;
	expected2.data[73] = 1.9767234714306963L;
	expected2.data[74] = 2.2018737001102795L;
	expected2.data[75] = 2.3665097685721577L;
	expected2.data[76] = 2.289764754522019L;
	expected2.data[77] = 1.5774158850738236L;
	expected2.data[78] = 2.839714210739911L;
	expected2.data[79] = 2.1549272174384724L;
	expected2.data[80] = 1.970183096782553L;
	expected2.data[81] = 1.7969707360022238L;
	expected2.data[82] = 1.7286806520586722L;
	expected2.data[83] = 1.4535356939171526L;
	expected2.data[84] = 1.1621714573740578L;
	expected2.data[85] = 1.0701910863955961L;
	expected2.data[86] = 0.9775048280256112L;
	expected2.data[87] = 0.942874069189586L;
	expected2.data[88] = 1.0421880328224133L;
	expected2.data[89] = 0.9946276812713261L;
	expected2.data[90] = 1.698711116717777L;
	expected2.data[91] = 2.3912942103557033L;
	expected2.data[92] = 1.4966476275197018L;
	expected2.data[93] = 1.5634436968990666L;
	expected2.data[94] = 1.8988181841649425L;
	expected2.data[95] = 2.052279691947489L;
	expected2.data[96] = 2.431220917415196L;
	expected2.data[97] = 2.18711368258014L;
	expected2.data[98] = 2.560773129925388L;
	expected2.data[99] = 2.8181108697181823L;
	expected2.data[100] = 2.3557982041157106L;
	expected2.data[101] = 2.006293212769075L;
	expected2.data[102] = 2.2180325817270967L;
	expected2.data[103] = 1.7786439522093844L;
	expected2.data[104] = 2.4986490136246724L;
	expected2.data[105] = 2.916480478394622L;
	expected2.data[106] = 3.0380868279627413L;
	expected2.data[107] = 2.2761214162911667L;
	expected2.data[108] = 1.6548479092239115L;
	expected2.data[109] = 1.4535356939171526L;
	expected2.data[110] = 1.1621714573740578L;
	expected2.data[111] = 1.0321452031816967L;
	expected2.data[112] = 0.942874069189586L;
	expected2.data[113] = 1.0421880328224133L;
	expected2.data[114] = 1.0812976657696263L;
	expected2.data[115] = 1.2542614650762411L;
	expected2.data[116] = 1.4737023166547951L;

	expected2.index = (unsigned long*) calloc(expected2.length, sizeof(unsigned long));
	expected2.index[0] = 56;
	expected2.index[1] = 47;
	expected2.index[2] = 58;
	expected2.index[3] = 49;
	expected2.index[4] = 22;
	expected2.index[5] = 44;
	expected2.index[6] = 52;
	expected2.index[7] = 22;
	expected2.index[8] = 23;
	expected2.index[9] = 24;
	expected2.index[10] = 25;
	expected2.index[11] = 26;
	expected2.index[12] = 27;
	expected2.index[13] = 28;
	expected2.index[14] = 113;
	expected2.index[15] = 89;
	expected2.index[16] = 77;
	expected2.index[17] = 92;
	expected2.index[18] = 93;
	expected2.index[19] = 1;
	expected2.index[20] = 2;
	expected2.index[21] = 6;
	expected2.index[22] = 7;
	expected2.index[23] = 8;
	expected2.index[24] = 9;
	expected2.index[25] = 10;
	expected2.index[26] = 11;
	expected2.index[27] = 64;
	expected2.index[28] = 112;
	expected2.index[29] = 88;
	expected2.index[30] = 89;
	expected2.index[31] = 114;
	expected2.index[32] = 83;
	expected2.index[33] = 84;
	expected2.index[34] = 85;
	expected2.index[35] = 86;
	expected2.index[36] = 87;
	expected2.index[37] = 88;
	expected2.index[38] = 89;
	expected2.index[39] = 116;
	expected2.index[40] = 102;
	expected2.index[41] = 73;
	expected2.index[42] = 3;
	expected2.index[43] = 4;
	expected2.index[44] = 5;
	expected2.index[45] = 92;
	expected2.index[46] = 0;
	expected2.index[47] = 1;
	expected2.index[48] = 2;
	expected2.index[49] = 3;
	expected2.index[50] = 23;
	expected2.index[51] = 0;
	expected2.index[52] = 6;
	expected2.index[53] = 7;
	expected2.index[54] = 7;
	expected2.index[55] = 1;
	expected2.index[56] = 0;
	expected2.index[57] = 1;
	expected2.index[58] = 2;
	expected2.index[59] = 3;
	expected2.index[60] = 50;
	expected2.index[61] = 75;
	expected2.index[62] = 27;
	expected2.index[63] = 111;
	expected2.index[64] = 110;
	expected2.index[65] = 86;
	expected2.index[66] = 87;
	expected2.index[67] = 88;
	expected2.index[68] = 15;
	expected2.index[69] = 16;
	expected2.index[70] = 93;
	expected2.index[71] = 101;
	expected2.index[72] = 58;
	expected2.index[73] = 59;
	expected2.index[74] = 60;
	expected2.index[75] = 61;
	expected2.index[76] = 15;
	expected2.index[77] = 16;
	expected2.index[78] = 82;
	expected2.index[79] = 83;
	expected2.index[80] = 84;
	expected2.index[81] = 85;
	expected2.index[82] = 64;
	expected2.index[83] = 109;
	expected2.index[84] = 110;
	expected2.index[85] = 111;
	expected2.index[86] = 112;
	expected2.index[87] = 112;
	expected2.index[88] = 113;
	expected2.index[89] = 30;
	expected2.index[90] = 116;
	expected2.index[91] = 69;
	expected2.index[92] = 6;
	expected2.index[93] = 0;
	expected2.index[94] = 8;
	expected2.index[95] = 25;
	expected2.index[96] = 73;
	expected2.index[97] = 103;
	expected2.index[98] = 104;
	expected2.index[99] = 69;
	expected2.index[100] = 70;
	expected2.index[101] = 9;
	expected2.index[102] = 72;
	expected2.index[103] = 59;
	expected2.index[104] = 59;
	expected2.index[105] = 99;
	expected2.index[106] = 100;
	expected2.index[107] = 32;
	expected2.index[108] = 83;
	expected2.index[109] = 83;
	expected2.index[110] = 84;
	expected2.index[111] = 86;
	expected2.index[112] = 87;
	expected2.index[113] = 88;
	expected2.index[114] = 89;
	expected2.index[115] = 89;
	expected2.index[116] = 31;


    // top-level unit tests for stamp
    MatrixProfile result2 = stamp(ts2, 10, 3);

	EXPECT_EQ(expected2.length, result2.length);
	for (unsigned long i = 0; i < expected2.length; i++) {
		EXPECT_NEAR((double)expected2.data[i], (double)result2.data[i], 0.000000000039);
		EXPECT_EQ(expected2.index[i], result2.index[i]);
	}

    // clean up
    free(ts2.data);
    free(expected2.data);
    free(expected2.index);
    free(result2.data);
    free(result2.index);

}


