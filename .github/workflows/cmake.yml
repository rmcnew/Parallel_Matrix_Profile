name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:    
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            compiler: g++-17
            target: Linux
            
          - os: macos-latest
            compiler: g++-17
            target: Macos
            
          - os: windows-latest
            compiler: cl
            target: Windows

    steps:
    - uses: actions/checkout@v2
    
    - name: Install mpich for Linux
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y mpich
      
    - name: Install mpich for MacOS
      if: matrix.os == 'macos-latest'
      run: brew install mpich
    
    - name: Install MS_MPI for Windows, first use msys2
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:  
        update: true
        install: >-
          git
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-msmpi
      
    - name: Second, put MSYS2_MinGW64 on PATH
      if: matrix.os == 'windows-latest'
      # there is not yet an environment variable for this path from msys2/setup-msys2
      run: echo "D:/a/_temp/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
    - name: Third, download MS-MPI
      if: matrix.os == 'windows-latest'
      run: curl -L -O https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe

    - name: Fourth, Install mpiexec.exe (-force needed to bypass GUI on headless)
      if: matrix.os == 'windows-latest'
      run: .\msmpisetup.exe -unattend -force

    - name: Fifth, test that mpiexec.exe exists
      if: matrix.os == 'windows-latest'
      # can't use MSMPI_BIN as Actions doesn't update PATH from msmpisetup.exe
      run: Test-Path "C:\Program Files\Microsoft MPI\Bin\mpiexec.exe" -PathType leaf

    - name: Sixth, put MSMPI_BIN on PATH (where mpiexec is)
      if: matrix.os == 'windows-latest'
      run: echo "C:\Program Files\Microsoft MPI\Bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
